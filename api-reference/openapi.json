{
  "openapi": "3.0.1",
  "info": {
    "title": "SmartBrains API Reference",
    "description": "This is the official documentation of the SmartBrainsAfica e-learning API.  You can find out more about the api on [Github](https://github.com/Smart-Brains-Kenya/elearning-api) or email the [developer.](https://alex1kariuki.github.io/).  For this api, you can use the api key provided to you and insert the `special-key` to test the authorization filters.",
    "termsOfService": "https://www.smartbrainskenya.com/",
    "contact": {
      "email": "alexngugi47@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.1"
  },
  "tags": [
    {
      "name": "auth",
      "description": "Endpoints for tutor, student and admin registrations"
    },
    {
      "name": "roles",
      "description": "Endpoints for roles that will be assigned to backend users"
    },
    {
      "name": "courses",
      "description": "Endpoints for course operations"
    },
    {
      "name": "topics",
      "description": "Endpoints for topics operations"
    },
    {
      "name": "subtopics",
      "description": "Endpoints for subtopics operations"
    },
    {
      "name": "steps",
      "description": "Endpoints for tutor guide steps"
    },
    {
      "name": "quizes",
      "description": "Endpoints for quizes operations"
    },
    {
      "name": "snippets",
      "description": "Endpoints saving users code"
    },
    {
      "name": "schools",
      "description": "Endpoints for schools operations"
    },
    {
      "name": "classes",
      "description": "Endpoints for class operations"
    },
    {
      "name": "tutors",
      "description": "Endpoints for tutor operations"
    },
    {
      "name": "students",
      "description": "Endpoints for student operations"
    },
    {
      "name": "overviews",
      "description": "This will have admin and tutor overviews"
    },
    {
      "name": "calendar",
      "description": "Endpoints for calendar operations"
    },
    {
      "name": "payments",
      "description": "Endpoints for payment operations"
    },
    {
      "name": "earnings",
      "description": "Earnings for tutors on the platform"
    },
    {
      "name": "reports",
      "description": "This is the one to generate the platform reports"
    },
    {
      "name": "results",
      "description": "(Documenting soon)"
    }
  ],
  "servers": [
    {
      "url": "api.smartbrainskenya.com"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/auth/kids/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Register a kid within a school and independent online school",
        "requestBody": {
          "description": "Use this to register a student",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Student created succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/kids/signin": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Login the student",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The user name for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passcode",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful login",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "authentication failed, incorrect username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/kids/logout": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Logout the student",
        "operationId": "logoutStudent",
        "parameters": [
          {
            "name": "student_id",
            "in": "query",
            "description": "The student if to ensure the student is identified",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "passcode",
            "in": "query",
            "description": "The password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful login",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "authentication failed, incorrect username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/kids/reset-password": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Reset Password for student, you will have to have admin or tutor credentials",
        "operationId": "resetPassword",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "description": "The username for the student",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPassword",
            "in": "query",
            "description": "The new password for login in clear text",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful reset the password",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "student not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "error in encrypting password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Register a user who can be changed back to admin",
        "requestBody": {
          "description": "Use this to register a user",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "User created succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/admin/signin": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Login the admin",
        "operationId": "loginAdmin",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login for admin",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful login",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "authentication failed, incorrect username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/tutor/register": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Register a tutor on the platform",
        "requestBody": {
          "description": "Use this to register a tutor",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Tutor"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Tutor created succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/tutor/signin": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Login the tutor",
        "operationId": "loginTutor",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email for login",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "password",
            "in": "query",
            "description": "The password for login for admin",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful login",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "401": {
            "description": "authentication failed, incorrect username or password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/tutor/reset": {
      "post": {
        "tags": [
          "auth"
        ],
        "description": "Reset Password for tutor, you will have to have admin or tutor rights credentials",
        "operationId": "resetPasswordTutor",
        "parameters": [
          {
            "name": "email",
            "in": "query",
            "description": "The email for the tutor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful reset the password",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int32"
                }
              },
              "X-Expires-After": {
                "description": "date in UTC when token expires",
                "schema": {
                  "type": "string",
                  "format": "date-time"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              },
              "application/xml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "student not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "500": {
            "description": "error in encrypting password",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/roles": {
      "get": {
        "tags": [
          "roles"
        ],
        "description": "Returns all roles from the platform",
        "responses": {
          "200": {
            "description": "Roles response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Roles"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "roles"
        ],
        "description": "Creates roles on the platform",
        "requestBody": {
          "description": "Role to add to the platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Roles"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "role added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/roles/{roleId}": {
      "get": {
        "tags": [
          "roles"
        ],
        "summary": "Find role for the id",
        "description": "Returns all roles from the platform",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of role to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Roles not found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "roles"
        ],
        "summary": "Patch role for the id",
        "description": "Edit the role for the platform",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of role to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Roles"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Role not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "roles"
        ],
        "summary": "Delete the role by the id",
        "description": "Delete the role for the platform",
        "parameters": [
          {
            "name": "roleId",
            "in": "path",
            "description": "ID of role to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Role not found",
            "content": {}
          }
        }
      }
    },
    "/course": {
      "get": {
        "tags": [
          "courses"
        ],
        "description": "Returns all courses from the platform",
        "responses": {
          "200": {
            "description": "Course response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Course"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "courses"
        ],
        "description": "Creates a new course on the platform",
        "requestBody": {
          "description": "Plant to add to the store",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Course"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "course added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/course/{id}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Find course for the id",
        "description": "Returns all courses from the platform",
        "operationId": "getCourseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of course to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Course not found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "courses"
        ],
        "summary": "Patch course for the id",
        "description": "Edit the course for the platform",
        "operationId": "patchCourseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of course to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Course not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "courses"
        ],
        "summary": "Delete the course by the id",
        "description": "Delete the course for the platform",
        "operationId": "deleteCourseById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of course to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Course not found",
            "content": {}
          }
        }
      }
    },
    "/course/lessons/{tutorId}": {
      "get": {
        "tags": [
          "courses"
        ],
        "summary": "Find lessons that tutor has",
        "description": "Returns all lessons based on a tutor",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of tutor to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "courseId": {
                        "type": "string",
                        "description": "ID of the course"
                      },
                      "courseName": {
                        "type": "string",
                        "description": "Name of the course"
                      },
                      "className": {
                        "type": "string",
                        "description": "Name of the class"
                      },
                      "schoolName": {
                        "type": "string",
                        "description": "Name of the school"
                      },
                      "schoolLogo": {
                        "type": "string",
                        "description": "URL of the school logo"
                      },
                      "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start time of the lesson"
                      },
                      "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End time of the lesson"
                      },
                      "startRecur": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start recurrence of the lesson"
                      },
                      "endRecur": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End recurrence of the lesson"
                      }
                    }
                  }
                }
              },
              "application/xml": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "courseId": {
                        "type": "string",
                        "description": "ID of the course"
                      },
                      "courseName": {
                        "type": "string",
                        "description": "Name of the course"
                      },
                      "className": {
                        "type": "string",
                        "description": "Name of the class"
                      },
                      "schoolName": {
                        "type": "string",
                        "description": "Name of the school"
                      },
                      "schoolLogo": {
                        "type": "string",
                        "description": "URL of the school logo"
                      },
                      "startTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start time of the lesson"
                      },
                      "endTime": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End time of the lesson"
                      },
                      "startRecur": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Start recurrence of the lesson"
                      },
                      "endRecur": {
                        "type": "string",
                        "format": "date-time",
                        "description": "End recurrence of the lesson"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Course not found",
            "content": {}
          }
        }
      }
    },
    "/topic": {
      "get": {
        "tags": [
          "topics"
        ],
        "description": "Returns all topics from the platform",
        "responses": {
          "200": {
            "description": "Topic response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Topic"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "topics"
        ],
        "description": "Creates a new topic on the platform",
        "requestBody": {
          "description": "Post a new topic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Topic"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "topic added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/topic/{id}": {
      "get": {
        "tags": [
          "topics"
        ],
        "summary": "Find topics for the id",
        "description": "Returns all topics by the ID",
        "operationId": "getTopicById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of topic to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Topic not found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "topics"
        ],
        "summary": "Patch topic for the id",
        "description": "Edit the topic for the platform",
        "operationId": "patchTopicById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of topic to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Topic"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Topic not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "topics"
        ],
        "summary": "Delete the topic by the id",
        "description": "Delete the topic for the platform",
        "operationId": "deleteTopicById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of topic to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Topic not found",
            "content": {}
          }
        }
      }
    },
    "/subtopic": {
      "get": {
        "tags": [
          "subtopics"
        ],
        "description": "Returns all subtopics from the platform",
        "responses": {
          "200": {
            "description": "Sub Topic response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subtopic"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "subtopics"
        ],
        "description": "Creates a new subtopic on the platform",
        "requestBody": {
          "description": "Post a new subtopic",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Subtopic"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "sub topic added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtopic"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/subtopic/{id}": {
      "get": {
        "tags": [
          "subtopics"
        ],
        "summary": "Find sub topics for the id",
        "description": "Returns all sub topics by the ID",
        "operationId": "getSubTopicById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of subtopic to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtopic"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subtopic"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Sub Topic not found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "subtopics"
        ],
        "summary": "Patch sub topic for the id",
        "description": "Edit the topic for the platform",
        "operationId": "patchSubTopicById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of subtopic to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtopic"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subtopic"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "SubTopic not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "subtopics"
        ],
        "summary": "Delete the subtopic by the id",
        "description": "Delete the subtopic for the platform",
        "operationId": "deleteSubTopicById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of subtopic to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Sub Topic not found",
            "content": {}
          }
        }
      }
    },
    "/subtopic/topic/{id}": {
      "get": {
        "tags": [
          "subtopics"
        ],
        "summary": "Find sub topics based on a topic ID",
        "description": "Returns all sub topics by the ID of the topic",
        "operationId": "getSubTopicByTopicId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of subtopic to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subtopic"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Subtopic"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Sub Topic not found",
            "content": {}
          }
        }
      }
    },
    "/steps": {
      "get": {
        "tags": [
          "steps"
        ],
        "description": "Returns all tutor steps from the platform",
        "responses": {
          "200": {
            "description": "Steps response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Steps"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "steps"
        ],
        "description": "Creates a new step on the platform",
        "requestBody": {
          "description": "Post a new step",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Steps"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "steps added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Steps"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/steps/{stepId}": {
      "get": {
        "tags": [
          "steps"
        ],
        "summary": "Find steps for the id",
        "description": "Returns all steps by the ID",
        "parameters": [
          {
            "name": "stepId",
            "in": "path",
            "description": "ID of steps to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Steps"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Steps"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Steps not found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "steps"
        ],
        "summary": "Patch steps for the id",
        "description": "Edit the steps for the platform",
        "parameters": [
          {
            "name": "stepId",
            "in": "path",
            "description": "ID of step to edit",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Steps"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Steps"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Steps not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "steps"
        ],
        "summary": "Delete the steps by the id",
        "description": "Delete the steps for the platform",
        "parameters": [
          {
            "name": "stepId",
            "in": "path",
            "description": "ID of steps to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Step not found",
            "content": {}
          }
        }
      }
    },
    "/steps/topic/{topicId}": {
      "get": {
        "tags": [
          "steps"
        ],
        "summary": "Find steps based on a topic ID",
        "description": "Returns all steps by the ID of the topic",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of steps to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Steps"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Steps"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Steps not found",
            "content": {}
          }
        }
      }
    },
    "/quiz/student/questions/{topicId}": {
      "get": {
        "tags": [
          "quizes"
        ],
        "description": "Returns all quiz objects related to the topic",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of quiz to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quiz response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Quiz"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/quiz/student/submit-answers": {
      "post": {
        "tags": [
          "quizes"
        ],
        "description": "Creates a new quiz on the platform",
        "requestBody": {
          "description": "Post a new quiz",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Quiz"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Quiz added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/quiz/student/update-score": {
      "post": {
        "tags": [
          "quizes"
        ],
        "description": "Update/ Add a new quiz score for the student",
        "requestBody": {
          "description": "Update a user score",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Scores updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/quiz/admin/questions/{id}": {
      "get": {
        "tags": [
          "quizes"
        ],
        "summary": "Find questions for the id",
        "description": "Returns all questions by the topic ID",
        "operationId": "getQuestionsByTopicId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quiz to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Quiz Topic not found",
            "content": {}
          }
        }
      }
    },
    "/quiz/admin/getSingleQuestion/{id}": {
      "get": {
        "tags": [
          "quizes"
        ],
        "summary": "Find question given an ID",
        "description": "Returns question dependent on the ID",
        "operationId": "getQuestionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quiz question to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Quiz Question not found",
            "content": {}
          }
        }
      }
    },
    "/quiz/admin/addQuestion": {
      "post": {
        "tags": [
          "quizes"
        ],
        "description": "Add a new question",
        "requestBody": {
          "description": "Added a new question to the platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Quiz"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Quiz updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/quiz/admin/editQuestion/{id}": {
      "patch": {
        "tags": [
          "quizes"
        ],
        "summary": "Patch a question",
        "description": "Edit a question",
        "operationId": "patchQuestionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Quiz"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Quiz not found",
            "content": {}
          }
        }
      }
    },
    "/quiz/admin/deleteQuiz/{id}": {
      "delete": {
        "tags": [
          "quizes"
        ],
        "summary": "Delete the quiz by the id",
        "description": "Delete the quiz for the platform",
        "operationId": "deleteQuizById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of quiz to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Quiz not found",
            "content": {}
          }
        }
      }
    },
    "/quiz/admin/deleteQuestion/{id}": {
      "delete": {
        "tags": [
          "quizes"
        ],
        "summary": "Delete the question by the id",
        "description": "Delete the question for the platform",
        "operationId": "deleteQuizQuestionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of question to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Question not found",
            "content": {}
          }
        }
      }
    },
    "/snippets/{topicId}": {
      "get": {
        "tags": [
          "snippets"
        ],
        "summary": "Find snippet given a topicId",
        "description": "Returns snippet dependent on the topicId",
        "operationId": "getSnippetByTopicId",
        "parameters": [
          {
            "name": "topicId",
            "in": "path",
            "description": "ID of the topic that will hold that code block",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Snippet not found",
            "content": {}
          }
        }
      }
    },
    "/snippets": {
      "patch": {
        "tags": [
          "snippets"
        ],
        "summary": "Patch/ update a snippet of code",
        "description": "Edit a snippet of code",
        "operationId": "patchSnippet",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Snippet not found",
            "content": {}
          }
        }
      }
    },
    "/schools": {
      "get": {
        "tags": [
          "schools"
        ],
        "summary": "Get all schools that are on the platform",
        "description": "Returns schools on the platform",
        "operationId": "getAllSchools",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/School"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/School"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "No records found",
            "content": {}
          }
        }
      },
      "post": {
        "tags": [
          "schools"
        ],
        "summary": "Post a school on the platform",
        "requestBody": {
          "description": "add a new school to the platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/School"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/School"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/School"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "No records found",
            "content": {}
          }
        }
      }
    },
    "/schools/{schoolId}": {
      "get": {
        "tags": [
          "schools"
        ],
        "summary": "Get a single school on the platform",
        "description": "Returns school on the platform",
        "operationId": "getSchoolById",
        "parameters": [
          {
            "name": "schoolId",
            "in": "path",
            "description": "ID of the school on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/School"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/School"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "School not found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "schools"
        ],
        "summary": "Patch/ update a snippet of code",
        "description": "Edit a snippet of code",
        "parameters": [
          {
            "name": "schoolId",
            "in": "path",
            "description": "ID of the school on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "patchSnippet",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Snippet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Snippet not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "schools"
        ],
        "summary": "Delete the school by the id",
        "description": "Delete the school for the platform",
        "operationId": "deleteSchoolById",
        "parameters": [
          {
            "name": "schoolId",
            "in": "path",
            "description": "ID of school to return",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "School not found",
            "content": {}
          }
        }
      }
    },
    "/classes": {
      "post": {
        "tags": [
          "classes"
        ],
        "summary": "Post a class in a given school",
        "requestBody": {
          "description": "Add a new class to the platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Class"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/classes/school/{schoolId}": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Get a classes based on a school on the platform",
        "description": "Returns class based on a school on the platform",
        "operationId": "getClassesBySchoolId",
        "parameters": [
          {
            "name": "schoolId",
            "in": "path",
            "description": "ID of the school on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Class not found",
            "content": {}
          }
        }
      }
    },
    "/classes/students/{classId}": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Get a classes based on a school on the platform",
        "description": "Returns class based on a school on the platform",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID of the class on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Class not found",
            "content": {}
          }
        }
      }
    },
    "/classes/{classId}": {
      "get": {
        "tags": [
          "classes"
        ],
        "summary": "Get a single class by its ID",
        "description": "Returns a class given an ID",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID of the class on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "getSingleClass",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "No records found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "classes"
        ],
        "summary": "Patch/ update a class on the platform",
        "description": "Edit a class",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID of the class on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "operationId": "patchClass",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Class not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "classes"
        ],
        "summary": "Delete the class by the id",
        "description": "Delete the class for the platform",
        "operationId": "deleteClassById",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID of the class on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Class not found",
            "content": {}
          }
        }
      }
    },
    "/classes/resetSessions/{classId}": {
      "patch": {
        "tags": [
          "classes"
        ],
        "summary": "Reset all user sessions for those classes",
        "description": "Reset class sessions logging users out",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID of the class on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Class not found",
            "content": {}
          }
        }
      }
    },
    "/classes/generateCode": {
      "post": {
        "tags": [
          "classes"
        ],
        "summary": "Create a class code for students to sign in to a class",
        "requestBody": {
          "description": "Start a class from the tutor platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassCode"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ClassCode"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/classes/joinClass": {
      "post": {
        "tags": [
          "classes"
        ],
        "summary": "With a class code generated join a class to mark attendance",
        "requestBody": {
          "description": "Join a class from the student platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClassCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ClassCode"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/ClassCode"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/classes/launch-nuke": {
      "post": {
        "tags": [
          "classes"
        ],
        "summary": "Reset all classes that have tutors assigned on the platform",
        "requestBody": {
          "description": "Requires admin permissions",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Class"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Class"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/rating/{classId}": {
      "get": {
        "tags": [
          "rating"
        ],
        "summary": "Get all ratings for the class ID",
        "description": "Get all ratings for the class ID",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID of the class on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Rating not found",
            "content": {}
          }
        }
      }
    },
    "/rating": {
      "post": {
        "tags": [
          "rating"
        ],
        "summary": "Reset all user sessions for those classes",
        "description": "Reset class sessions logging users out",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Rating"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Rating not found",
            "content": {}
          }
        }
      }
    },
    "/tutors": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get all tutors on the platform",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/assign/{tutorId}": {
      "patch": {
        "tags": [
          "tutors"
        ],
        "summary": "Assign a tutor a class on the platform",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of the tutor on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/assigned/schools": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get tutors that have been assigned in schools",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/assigned/classes": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get assigned tutors per class",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/assigned/students": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get students assigned to a tutor",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/assigned/lessons": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get assigned lessons for a tutor",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/assigned/school-stats/{id}": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get assigned school stats for a tutor",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the school in the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/classes/{tutorId}": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get classes taught by the tutor",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of the tutor on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/{tutorId}": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get a single tutor",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of the tutor on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "tutors"
        ],
        "summary": "Edit a single tutor",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of the tutor on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "tutors"
        ],
        "summary": "Delete tutor from the platform",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of the tutor on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Tutor"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/tutors/overview/{tutorId}": {
      "get": {
        "tags": [
          "tutors"
        ],
        "summary": "Get the overview for the tutor dashboard",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of the tutor on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "totalStudents": {
                        "type": "string",
                        "description": "total students under tutor"
                      },
                      "avgLessonRating": {
                        "type": "string",
                        "description": "Average rating of the tutor"
                      },
                      "avgQuizScore": {
                        "type": "string",
                        "description": "Average Quiz Score for the tutor"
                      },
                      "classesTaught": {
                        "type": "string",
                        "description": "Classes taught by the tutor"
                      },
                      "avgTime": {
                        "type": "string",
                        "description": "Average time of those classes"
                      },
                      "overallPerformance": {
                        "type": "string",
                        "description": "Overall performance of the tutor"
                      },
                      "tenWeekAvg": {
                        "type": "array",
                        "description": "Ten-week average points for different courses",
                        "items": {
                          "type": "object",
                          "properties": {
                            "course": {
                              "type": "string",
                              "description": "Course name"
                            },
                            "points": {
                              "type": "array",
                              "description": "Points for each week",
                              "items": {
                                "type": "number"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "example": {
                  "totalStudents": "5",
                  "avgLessonRating": "4.7",
                  "avgQuizScore": "85",
                  "classesTaught": "10",
                  "avgTime": "90 minutes",
                  "overallPerformance": "Excellent",
                  "tenWeekAvg": [
                    {
                      "course": "HTML",
                      "points": [
                        50,
                        10,
                        19,
                        33,
                        50,
                        10,
                        19,
                        33,
                        60
                      ]
                    },
                    {
                      "course": "CSS",
                      "points": [
                        50,
                        10,
                        19,
                        33,
                        50,
                        10,
                        19,
                        33,
                        60
                      ]
                    },
                    {
                      "course": "Python",
                      "points": [
                        50,
                        10,
                        19,
                        33,
                        50,
                        10,
                        19,
                        33,
                        60
                      ]
                    },
                    {
                      "course": "Javascript",
                      "points": [
                        50,
                        10,
                        19,
                        33,
                        50,
                        10,
                        19,
                        33,
                        60
                      ]
                    },
                    {
                      "course": "Scratch",
                      "points": [
                        50,
                        10,
                        19,
                        33,
                        50,
                        10,
                        19,
                        33,
                        60
                      ]
                    },
                    {
                      "course": "Robotics",
                      "points": [
                        50,
                        10,
                        19,
                        33,
                        50,
                        10,
                        19,
                        33,
                        60
                      ]
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/students": {
      "post": {
        "tags": [
          "students"
        ],
        "summary": "Register a student on the platform",
        "requestBody": {
          "description": "Register a student on the platform",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      },
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get all students on the platform",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/students/rewards/{studentId}": {
      "post": {
        "tags": [
          "students"
        ],
        "summary": "Submit reward points for the student",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "description": "ID of the student on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Submit reward points for the student",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/students/school/{schoolId}": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get all students per school",
        "parameters": [
          {
            "name": "schoolId",
            "in": "path",
            "description": "ID of the school in the student data on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/students/class/{classId}": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get all students in a particular class",
        "parameters": [
          {
            "name": "classId",
            "in": "path",
            "description": "ID of the class that you want the data",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      }
    },
    "/students/{studentId}": {
      "get": {
        "tags": [
          "students"
        ],
        "summary": "Get a particular student on the platform",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "description": "ID of the student that you want the data for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "students"
        ],
        "summary": "Edit a particular students data",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "description": "ID of the student on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Submit changes for the student data",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Student"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Student"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "500": {
            "description": "Something went wrong",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "students"
        ],
        "summary": "Delete a particular student on the platform",
        "description": "Delete the student from the platform",
        "parameters": [
          {
            "name": "studentId",
            "in": "path",
            "description": "ID of the student on the platform",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Student not found",
            "content": {}
          }
        }
      }
    },
    "/calendar": {
      "get": {
        "tags": [
          "calendar"
        ],
        "description": "Returns all calendar events from the platform",
        "responses": {
          "200": {
            "description": "Calendar response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Calendar"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "calendar"
        ],
        "description": "Creates a new calendar event on the platform",
        "requestBody": {
          "description": "Post a new calendar event",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Calendar"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Event added succesfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/calendar/{eventId}": {
      "get": {
        "tags": [
          "calendar"
        ],
        "summary": "Find calendar event for the id",
        "description": "Returns all events by the ID",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Event not found",
            "content": {}
          }
        }
      },
      "patch": {
        "tags": [
          "calendar"
        ],
        "summary": "Patch calendar event for the id",
        "description": "Edit the event for the platform",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of tutor to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Calendar not found",
            "content": {}
          }
        }
      },
      "delete": {
        "tags": [
          "calendar"
        ],
        "summary": "Delete the calendar event by the id",
        "description": "Delete the calendar event on the platform",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "ID of calendar event to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {}
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Event not found",
            "content": {}
          }
        }
      }
    },
    "/calendar/events{tutorId}": {
      "get": {
        "tags": [
          "calendar"
        ],
        "summary": "Find calendar event for the id",
        "description": "Returns all events by the ID",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of event to return",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Calendar"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {}
          },
          "404": {
            "description": "Event not found",
            "content": {}
          }
        }
      }
    },
    "/payment/{courseId}/pay": {
      "post": {
        "tags": [
          "payments"
        ],
        "description": "Initialize a paystack Payment",
        "parameters": [
          {
            "name": "courseId",
            "in": "path",
            "description": "ID of the course one is paying for",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Payment initialization on paystack",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment initiated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment": {
      "post": {
        "tags": [
          "payments"
        ],
        "description": "Make Payment",
        "requestBody": {
          "description": "Payment to be saved",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Payment"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Payment saved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/verify/{reference}": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Verify that a payment was successful",
        "description": "Returns payment status",
        "operationId": "verifyTransaction",
        "parameters": [
          {
            "name": "reference",
            "in": "path",
            "description": "ID of the transaction from paystack",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Payment"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID reference supplied",
            "content": {}
          },
          "404": {
            "description": "Payment not found",
            "content": {}
          }
        }
      }
    },
    "/payment/{courseId}": {
      "get": {
        "tags": [
          "payments"
        ],
        "summary": "Verify that a course has been paid for",
        "description": "Returns a course status on the platform",
        "operationId": "verifyCoursesPaid",
        "parameters": [
          {
            "name": "courseId",
            "in": "path",
            "description": "ID of the course paid for to verify",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Course"
                }
              }
            }
          },
          "400": {
            "description": "Invalid course reference supplied",
            "content": {}
          },
          "404": {
            "description": "Course not found",
            "content": {}
          }
        }
      }
    },
    "/earnings": {
      "get": {
        "tags": [
          "earnings"
        ],
        "summary": "Get all the platform earnings=",
        "description": "Returns an array of earnings on the platform",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Earnings"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Earnings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid course reference supplied",
            "content": {}
          },
          "404": {
            "description": "Earning not found",
            "content": {}
          }
        }
      }
    },
    "/earnings/{earningsId}": {
      "get": {
        "tags": [
          "earnings"
        ],
        "summary": "Get the specific earning selected",
        "description": "Returns an object of the earning on the platform",
        "parameters": [
          {
            "name": "earningsId",
            "in": "path",
            "description": "ID of the earning earned by tutor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Earnings"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Earnings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid course reference supplied",
            "content": {}
          },
          "404": {
            "description": "Earning not found",
            "content": {}
          }
        }
      }
    },
    "/earnings/user/{tutorId}": {
      "get": {
        "tags": [
          "earnings"
        ],
        "summary": "Get the specific user earning selected",
        "description": "Returns an array of the earning for the tutor",
        "parameters": [
          {
            "name": "tutorId",
            "in": "path",
            "description": "ID of the tutor",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Earnings"
                }
              },
              "application/xml": {
                "schema": {
                  "$ref": "#/components/schemas/Earnings"
                }
              }
            }
          },
          "400": {
            "description": "Invalid course reference supplied",
            "content": {}
          },
          "404": {
            "description": "Earning not found",
            "content": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "User": {
        "required": [
          "name",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the user.",
            "example": "John Doe",
            "minLength": 1,
            "maxLength": 255
          },
          "email": {
            "type": "string",
            "description": "The email address of the user.",
            "example": "john.doe@example.com",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "The password of the user.",
            "example": "password123",
            "minLength": 8
          },
          "roles": {
            "type": "string",
            "description": "The role of the user defined from the roles table"
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of the user's last login.",
            "default": null
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the user was created."
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the user was last updated."
          }
        }
      },
      "Roles": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the role being added.",
            "example": "Finance Role"
          },
          "description": {
            "type": "string",
            "description": "The description of the role being added",
            "example": "Responsible for finance operations"
          },
          "permissions": {
            "type": "object",
            "description": "The permissions in an array that are assigned to user"
          }
        }
      },
      "Tutor": {
        "required": [
          "name",
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "avartar": {
            "type": "string"
          },
          "password": {
            "type": "string"
          },
          "role": {
            "type": "string"
          },
          "phoneNumber": {
            "type": "string"
          },
          "employeeNumber": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "isActive": {
            "type": "string"
          },
          "classesAssigned": {
            "type": "object",
            "description": "The classes that the tutor has been assigned"
          },
          "nextKin": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the next of kin"
                },
                "phoneNumber": {
                  "type": "string",
                  "description": "The phone number of the next of kin"
                }
              }
            }
          },
          "location": {
            "type": "string",
            "description": "The area where the tutor comes from"
          },
          "nationalIdNumber": {
            "type": "number",
            "description": "The national ID number"
          },
          "taxPin": {
            "type": "string",
            "description": "The national tax ID e.g. KRA Pin"
          },
          "tscNo": {
            "type": "string",
            "description": "The tsc number that the user has"
          },
          "bankAccount": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "accountNumber": {
                  "type": "string",
                  "description": "The bank account number"
                },
                "accountName": {
                  "type": "string",
                  "description": "The bank account name E.g. Equity Bank"
                },
                "accountHolderName": {
                  "type": "string",
                  "description": "The account holders name E.g. Lemuel"
                }
              }
            }
          },
          "documents": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The document name"
                },
                "size": {
                  "type": "string",
                  "description": "The size of the bank account"
                },
                "link": {
                  "type": "string",
                  "description": "The link after uploading to the storage place"
                }
              }
            }
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "default": "2024-04-12T00:00:00Z",
            "description": "To ensure that the tutors are logged on"
          }
        }
      },
      "Student": {
        "required": [
          "name",
          "username",
          "passcode",
          "email"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the student."
          },
          "username": {
            "type": "string",
            "description": "The username of the student should be unique"
          },
          "passcode": {
            "type": "string",
            "description": "The passcode of the student."
          },
          "gender": {
            "type": "string",
            "description": "The gender of the student."
          },
          "email": {
            "type": "string",
            "description": "The email address of the student."
          },
          "phoneNumber": {
            "type": "number",
            "description": "The phone number of the student."
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date",
            "description": "The date of birth of the student."
          },
          "country": {
            "type": "string",
            "description": "The country of the student."
          },
          "mitCode": {
            "type": "string",
            "description": "The MIT code of the student."
          },
          "avatar": {
            "type": "string",
            "description": "The avatar of the student."
          },
          "schoolAttending": {
            "type": "string",
            "description": "The school the student is attending."
          },
          "rewardPoints": {
            "type": "number",
            "description": "The reward points of the student.",
            "default": 0
          },
          "_school": {
            "type": "string",
            "description": "The ID of the school to which the student belongs."
          },
          "_classEnrolled": {
            "type": "string",
            "description": "The ID of the class in which the student is enrolled."
          },
          "_certificates": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs of the certificates earned by the student."
          },
          "attendedClasses": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The IDs of the classes attended by the student."
          },
          "quizAttempts": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "quizId": {
                  "type": "string",
                  "description": "The ID of the quiz attempted by the student."
                },
                "attempts": {
                  "type": "number",
                  "description": "The number of attempts made by the student.",
                  "default": 0
                },
                "score": {
                  "type": "number",
                  "description": "The score achieved by the student.",
                  "default": 0
                }
              }
            }
          },
          "completedCourses": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "courseId": {
                  "type": "string",
                  "description": "The ID of the completed course."
                },
                "timestamp": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The timestamp indicating when the course was completed."
                }
              }
            },
            "description": "List of completed courses by the student."
          },
          "lastLogin": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp of the student's last login.",
            "default": null
          },
          "currentSession": {
            "type": "string",
            "description": "The current session of the student.",
            "default": null
          },
          "otp": {
            "type": "string",
            "description": "The one-time password (OTP) of the student for password reset."
          },
          "otpExpiration": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration time of the OTP."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the student was created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "School": {
        "required": [
          "name",
          "code"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "description": "An abbreviation for a school e.g. Mastercard School (msc)",
            "type": "string"
          },
          "location": {
            "type": "string"
          },
          "region": {
            "type": "string"
          },
          "logo": {
            "type": "string"
          },
          "town": {
            "type": "string"
          },
          "isSchoolAvailable": {
            "type": "string"
          },
          "type": {
            "description": "The type of the school or organisation signing up",
            "type": "string",
            "enum": [
              "all",
              "club",
              "test"
            ]
          }
        }
      },
      "Class": {
        "required": [
          "_school",
          "_course",
          "name"
        ],
        "type": "object",
        "properties": {
          "_school": {
            "type": "string"
          },
          "tutor": {
            "type": "string"
          },
          "assTutor": {
            "type": "string"
          },
          "_course": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "students": {
            "type": "string"
          },
          "tutors": {
            "type": "string"
          },
          "schedule": {
            "type": "object",
            "properties": {
              "days": {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "description": "Array of days (e.g., [\"Mon\", \"Tue\", \"Wed\"])."
              },
              "startTime": {
                "type": "string",
                "description": "Start time in 24-hour format (e.g., \"10:00\")."
              },
              "endTime": {
                "type": "string",
                "description": "End time in 24-hour format (e.g., \"12:00\")."
              },
              "repeat": {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "enum": [
                      "weekly",
                      "monthly",
                      "untilDate"
                    ],
                    "default": "weekly"
                  },
                  "untilDate": {
                    "type": "string",
                    "format": "date",
                    "description": "Date until the schedule repeats (used if repeat is 'untilDate')."
                  },
                  "numberOfRepeats": {
                    "type": "integer",
                    "description": "Number of repeats (used if repeat is 'weekly' or 'monthly')."
                  }
                }
              }
            },
            "description": "Class schedule details."
          },
          "startRecur": {
            "type": "string",
            "format": "date",
            "description": "Start recurring date for the calendar."
          },
          "endRecur": {
            "type": "string",
            "format": "date",
            "description": "End recurring date for the calendar."
          },
          "daysOfWeek": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Array of days of the week (0-6) (e.g., [1, 3, 4])."
          },
          "calendarStartTime": {
            "type": "string",
            "description": "Start time for the calendar in 24-hour format (e.g., \"18:30:00\")."
          }
        }
      },
      "ClassCode": {
        "required": [
          "code",
          "tutorId",
          "courseId",
          "expirationTime"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "integer"
          },
          "tutorId": {
            "type": "string"
          },
          "courseId": {
            "type": "string"
          },
          "expirationTime": {
            "type": "string",
            "format": "date-time",
            "description": "The expiration time for the class code"
          },
          "generatedAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the class code was generated.",
            "default": "2024-04-12T00:00:00Z"
          },
          "students": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "studentId": {
                  "type": "string",
                  "description": "The ID of the student who joined using the class code."
                },
                "joinedAt": {
                  "type": "string",
                  "format": "date-time",
                  "description": "The timestamp indicating when the student joined the class."
                }
              }
            },
            "description": "List of students who joined using the class code."
          }
        }
      },
      "Rating": {
        "required": [
          "classId",
          "studentId",
          "rating"
        ],
        "type": "object",
        "properties": {
          "classId": {
            "type": "integer",
            "format": "int64"
          },
          "studentId": {
            "type": "string"
          },
          "rating": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the rating was created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "Course": {
        "required": [
          "name",
          "description",
          "image",
          "isFree"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "progress": {
            "description": "to be depricated soon",
            "type": "string"
          },
          "isReleased": {
            "type": "boolean"
          },
          "isFree": {
            "type": "boolean"
          },
          "amount": {
            "type": "number"
          },
          "duration": {
            "type": "number"
          },
          "certificate": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the quiz was created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "Topic": {
        "required": [
          "_courseId",
          "title",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "_courseId": {
            "description": "This is the for the relationship to the course",
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "progress": {
            "description": "To be deprecated soon",
            "type": "number"
          },
          "image": {
            "type": "string"
          },
          "referenceTopic": {
            "description": "This is filled in the case of a quiz topic, just reference another topicId",
            "type": "string"
          },
          "video": {
            "description": "To be shown on the reference topic",
            "type": "string"
          },
          "guide": {
            "description": "For the tutor guide, to be deprecated",
            "type": "string"
          },
          "environment": {
            "description": "The various coding environments that exist on the platform",
            "type": "string",
            "enum": [
              "code",
              "scratch",
              "android",
              "quiz",
              "codegames",
              "minecraft",
              "html",
              "css",
              "python",
              "typing",
              "mblock",
              "pictoblocks"
            ]
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the quiz was created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "Subtopic": {
        "required": [
          "topicId",
          "title",
          "description",
          "points",
          "image"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "topicId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "points": {
            "type": "number"
          },
          "image": {
            "type": "string"
          },
          "count": {
            "description": "The number in the array for hierachy purposes (To be implemented)",
            "type": "number"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the quiz was created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "Snippet": {
        "required": [
          "_id",
          "_topicId",
          "_studentId",
          "snippets"
        ],
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "description": "The ID of the snippet record.",
            "example": "609f69a5b86fd3280456820d"
          },
          "_topicId": {
            "type": "string",
            "description": "The ID of the topic associated with the snippet.",
            "example": "609f69a5b86fd3280456820e"
          },
          "_studentId": {
            "type": "string",
            "description": "The ID of the student associated with the snippet.",
            "example": "609f69a5b86fd3280456820f"
          },
          "snippets": {
            "type": "array",
            "description": "Array of code snippets.",
            "items": {
              "type": "object",
              "properties": {
                "language": {
                  "type": "string",
                  "description": "The programming language of the code snippet.",
                  "enum": [
                    "html",
                    "css",
                    "js"
                  ],
                  "example": "html"
                },
                "code": {
                  "type": "string",
                  "description": "The code snippet itself.",
                  "example": "<html><head><title>Sample HTML</title></head><body><h1>Hello, World!</h1></body></html>"
                }
              }
            },
            "required": [
              "language",
              "code"
            ]
          },
          "updatedOn": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp when the snippet record was updated."
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the snippet record was created."
          }
        }
      },
      "Steps": {
        "required": [
          "topicId",
          "title",
          "description"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "topicId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "image": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the tutor steps were created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "Quiz": {
        "required": [
          "topicId",
          "title",
          "answers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "topicId": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "answers": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "single"
                  ],
                  "description": "The type of answer ('single' for single answer)"
                },
                "content": {
                  "type": "string",
                  "description": "The content of the answer (text for single)"
                },
                "isCorrect": {
                  "type": "boolean",
                  "description": "Indicates if it's a correct answer"
                }
              }
            },
            "description": "The list of answers for the quiz."
          },
          "points": {
            "type": "number",
            "description": "The points associated with the quiz.",
            "default": 0
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the quiz was created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "Calendar": {
        "required": [
          "title",
          "startTime",
          "endTime",
          "startDate",
          "endDate"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The event title"
          },
          "description": {
            "type": "string",
            "description": "The event description"
          },
          "startTime": {
            "type": "string",
            "description": "The time to start of the event.",
            "example": "2024-04-12T10:30:00Z"
          },
          "endTime": {
            "type": "string",
            "description": "The time to end the event.",
            "example": "2024-04-12T10:30:00Z"
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "description": "The start date of the event",
            "example": "2024-04-12T10:30:00Z"
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "description": "The end date of the event.",
            "example": "2024-04-12T10:30:00Z"
          },
          "attendees": {
            "type": "array",
            "description": "Array of the attendees",
            "items": {
              "type": "object",
              "properties": {
                "tutors": {
                  "type": "string",
                  "description": "Attendees of the event"
                }
              }
            }
          }
        }
      },
      "Payment": {
        "required": [
          "user",
          "course",
          "paymentMethod",
          "amount",
          "currency",
          "status",
          "transactionId"
        ],
        "type": "object",
        "properties": {
          "user": {
            "type": "string",
            "description": "The ID of the user making the payment.",
            "example": "609f69a5b86fd3280456820d"
          },
          "course": {
            "type": "string",
            "description": "The ID of the course being purchased.",
            "example": "609f69a5b86fd3280456820e"
          },
          "paymentMethod": {
            "type": "string",
            "description": "The payment method used for the transaction.",
            "example": "credit_card"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the payment.",
            "example": 50
          },
          "currency": {
            "type": "string",
            "description": "The currency used for the payment.",
            "example": "KES"
          },
          "purchaseDate": {
            "type": "string",
            "format": "date-time",
            "description": "The date and time when the payment was made.",
            "example": "2024-04-12T10:30:00Z"
          },
          "status": {
            "type": "string",
            "description": "The status of the payment (e.g., 'success', 'pending', 'failed').",
            "example": "success"
          },
          "transactionId": {
            "type": "string",
            "description": "The ID of the transaction associated with the payment.",
            "example": "trans_123456789"
          }
        }
      },
      "Earnings": {
        "required": [
          "classId",
          "tutor",
          "amount"
        ],
        "type": "object",
        "properties": {
          "classId": {
            "type": "string",
            "description": "The ID of the class making the tutor earn from class code.",
            "example": "609f69a5b86fd3280456820d"
          },
          "tutor": {
            "type": "string",
            "description": "The ID of the tutor who is earning.",
            "example": "609f69a5b86fd3280456820e"
          },
          "amount": {
            "type": "number",
            "description": "The amount of the earnings.",
            "example": 600
          },
          "timestamp": {
            "type": "string",
            "format": "date-time",
            "description": "The timestamp indicating when the earnings were created.",
            "default": "2024-04-12T00:00:00Z"
          }
        }
      },
      "Error": {
        "required": [
          "error",
          "message"
        ],
        "type": "object",
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32"
          },
          "message": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    }
  }
}